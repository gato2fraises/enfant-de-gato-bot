const { REST, Routes, SlashCommandBuilder } = require('discord.js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Configuration
const clientId = process.env.CLIENT_ID;
const token = process.env.DISCORD_TOKEN;

if (!clientId || !token) {
    console.error('‚ùå CLIENT_ID et DISCORD_TOKEN doivent √™tre d√©finis dans le fichier .env');
    process.exit(1);
}

const commands = [];

// Fonction pour charger toutes les commandes slash
function loadSlashCommands() {
    const commandsPath = path.join(__dirname, 'slash-commands');
    
    if (!fs.existsSync(commandsPath)) {
        console.log('üìÅ Dossier slash-commands cr√©√©');
        fs.mkdirSync(commandsPath);
        return;
    }

    const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

    for (const file of commandFiles) {
        const filePath = path.join(commandsPath, file);
        try {
            const command = require(filePath);
            
            if ('data' in command && 'execute' in command) {
                commands.push(command.data.toJSON());
                console.log(`‚úÖ Commande slash ${command.data.name} charg√©e`);
            } else {
                console.warn(`‚ö†Ô∏è La commande ${file} n'a pas les propri√©t√©s 'data' et 'execute' requises.`);
            }
        } catch (error) {
            console.error(`‚ùå Erreur lors du chargement de ${file}:`, error);
        }
    }
}

// Charger toutes les commandes slash depuis le dossier slash-commands
loadSlashCommands();

// D√©ployer les commandes
async function deployCommands() {
    const rest = new REST().setToken(token);

    try {
        console.log(`üöÄ D√©but du d√©ploiement de ${commands.length} commandes slash...`);

        // D√©ployer globalement (peut prendre jusqu'√† 1 heure pour se propager)
        const data = await rest.put(
            Routes.applicationCommands(clientId),
            { body: commands }
        );

        console.log(`‚úÖ ${data.length} commandes slash d√©ploy√©es avec succ√®s !`);
        
        // Afficher la liste des commandes d√©ploy√©es
        console.log('\nüìã Commandes d√©ploy√©es :');
        data.forEach(command => {
            console.log(`  /${command.name} - ${command.description}`);
        });

    } catch (error) {
        console.error('‚ùå Erreur lors du d√©ploiement des commandes:', error);
    }
}

// Fonction pour d√©ployer sur un serveur sp√©cifique (plus rapide pour les tests)
async function deployGuildCommands(guildId) {
    const rest = new REST().setToken(token);

    try {
        console.log(`üöÄ D√©but du d√©ploiement de ${commands.length} commandes slash sur le serveur ${guildId}...`);

        const data = await rest.put(
            Routes.applicationGuildCommands(clientId, guildId),
            { body: commands }
        );

        console.log(`‚úÖ ${data.length} commandes slash d√©ploy√©es sur le serveur !`);

    } catch (error) {
        console.error('‚ùå Erreur lors du d√©ploiement des commandes sur le serveur:', error);
    }
}

// Fonction pour supprimer toutes les commandes
async function deleteAllCommands() {
    const rest = new REST().setToken(token);

    try {
        console.log('üóëÔ∏è Suppression de toutes les commandes slash...');

        await rest.put(
            Routes.applicationCommands(clientId),
            { body: [] }
        );

        console.log('‚úÖ Toutes les commandes slash ont √©t√© supprim√©es !');

    } catch (error) {
        console.error('‚ùå Erreur lors de la suppression des commandes:', error);
    }
}

// Gestion des arguments de ligne de commande
const args = process.argv.slice(2);

if (args.includes('--delete')) {
    deleteAllCommands();
} else if (args.includes('--guild') && args[args.indexOf('--guild') + 1]) {
    const guildId = args[args.indexOf('--guild') + 1];
    deployGuildCommands(guildId);
} else {
    deployCommands();
}

module.exports = { deployCommands, deployGuildCommands, deleteAllCommands };